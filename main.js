// Generated by CoffeeScript 1.6.3
(function() {
  var controlString, limit, mps, msgLength, randomString, receiveTimeStampStack, testRunning, ws, wsUrl;

  limit = 0xffff;

  wsUrl = "ws://91.213.212.21/ws/video?stream=cctv_hs-mob_med&binary=1";

  controlString = "S1";

  msgLength = 0xfff;

  mps = 5;

  ws = null;

  testRunning = false;

  receiveTimeStampStack = [];

  randomString = (function() {
    var availableChars, availableLen, code, _i;
    availableChars = [];
    for (code = _i = 33; _i <= 126; code = ++_i) {
      availableChars.push(String.fromCharCode(code));
    }
    availableLen = availableChars.length;
    return function(length) {
      var str;
      if (length < 1) {
        return;
      }
      str = "";
      while (length--) {
        str = str + availableChars[Math.round(Math.random() * availableLen)];
      }
      return str;
    };
  })();

  $(function() {
    var controlSelect, fpsMeter, lengthInput, logReceived, logSent, mpsInput, recLog, sendLog, stampReceived, startBtn, startTest, stopBtn, stopTest, urlSelect, wsLoop;
    startBtn = $('#start');
    stopBtn = $('#stop');
    lengthInput = $('#msg_length');
    mpsInput = $('#mps');
    urlSelect = $('#ws_url');
    controlSelect = $('#control_msg');
    sendLog = $('#send_console');
    recLog = $('#receive_console');
    fpsMeter = $('#fps_meter');
    lengthInput.val(msgLength);
    lengthInput.on('keyup', function() {
      return msgLength = lengthInput.val();
    });
    mpsInput.val(mps);
    mpsInput.on('keyup', function() {
      return mps = mpsInput.val() || 1;
    });
    urlSelect.val(wsUrl);
    urlSelect.on('change', function() {
      return wsUrl = urlSelect.val();
    });
    controlSelect.val(controlString);
    controlSelect.on('change', function() {
      return controlString = controlSelect.val();
    });
    stampReceived = (function() {
      var findLimit;
      findLimit = function(oldStamp) {
        var end, idx, stamp, _i, _len;
        end = -1;
        for (idx = _i = 0, _len = receiveTimeStampStack.length; _i < _len; idx = ++_i) {
          stamp = receiveTimeStampStack[idx];
          if (stamp > oldStamp) {
            return idx;
          }
          end = idx;
        }
        return end + 1;
      };
      return function() {
        var old, removableCount, stamp;
        stamp = Date.now();
        old = stamp - 1000;
        removableCount = findLimit(old);
        receiveTimeStampStack.splice(0, removableCount);
        receiveTimeStampStack.push(stamp);
        return fpsMeter.text(receiveTimeStampStack.length);
      };
    })();
    logReceived = function(string) {
      stampReceived();
      return recLog.append("<div>" + (Date.now()) + ": " + string + "</div>");
    };
    logSent = function(string) {
      return sendLog.text("" + (Date.now()) + ": " + string);
    };
    wsLoop = function() {
      var msg, timeout;
      if (!testRunning) {
        return;
      }
      timeout = 1000 / mps;
      msg = controlString === "Random" ? randomString(msgLength) : controlString;
      ws.send(msg);
      logSent("" + msg.length + " chars long message sent: " + (msg.substr(0, 15)));
      return window.setTimeout(wsLoop, timeout);
    };
    startTest = function() {
      ws = new WebSocket(wsUrl);
      ws.onopen = function() {
        logReceived("Websocket open");
        testRunning = true;
        return wsLoop();
      };
      ws.onclose = function() {
        logReceived("Websocket closed");
        return stopTest();
      };
      ws.onmessage = function(e) {
        var _base;
        return logReceived(e.data.length != null ? "WS message (" + e.data.length + " chars) received: " + (typeof (_base = e.data).substr === "function" ? _base.substr(0, 20) : void 0) : "Binary ws message received");
      };
      return ws.onerror = function(e) {
        var eText, key, val;
        eText = ((function() {
          var _results;
          _results = [];
          for (key in e) {
            val = e[key];
            _results.push("" + key + ": " + val + "<br />");
          }
          return _results;
        })()).join("\n");
        return recLog.parent().append("<div>" + (Date.now()) + ": Error: <br />" + eText + "</div>");
      };
    };
    stopTest = function() {
      testRunning = false;
      if (ws && ws.readyState === ws.OPEN) {
        return ws.close();
      }
    };
    startBtn.on('click', function(e) {
      e.preventDefault();
      return startTest();
    });
    return stopBtn.on('click', function(e) {
      e.preventDefault();
      return stopTest();
    });
  });

}).call(this);
